import math
import re
from git.diff import Diff
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
from git import Repo

def continguous_zip(l: list):
  """generated by gpt
  
  generates pairs given list
  Example:
    [a,b,c,d]
  
  Returns
    [(a,b), (b,c), (c,d)]
  """
  return list(zip(l[:-1], l[1:]))

def get_diff_file(diff: Diff) -> str:
  if diff.a_blob:
      return diff.a_blob.path
  elif diff.b_blob:
      return diff.b_blob.path


# NOTE do not have support for h,m,s,ms,ns
allowed_time_units = ["d", "m", "y"] 

def extract_number(date_expr: str) -> int:
  found = re.match(rf'(-?\d+)({"|".join(allowed_time_units)})', date_expr)
  if found:
    return int(found.group(1))
  else:
    raise ValueError("date expr does not conform to regex and or allowed time units")



def parse_relative_time_expr(date_expr: str):
  number = abs(extract_number(date_expr))
  match(date_expr):
    case _ if date_expr.endswith("d"):
      return datetime.now() - relativedelta(days=number)
    case _ if date_expr.endswith("m"):
      return datetime.now() - relativedelta(months=number)
    case _ if date_expr.endswith("y"):
      return datetime.now() - relativedelta(years=number)
    case _ :
      raise ValueError(f"Cannot Parse date_expr {date_expr}")
  
def parse_date_expr(date_expr: str):
  """
  Args:
    date_expr: str
      Examples:
        relative_time:
          7d
          12m
          100y
  """
  is_relative_time_expr = any([date_expr.endswith(unit) for unit in allowed_time_units])
  if is_relative_time_expr:
    # is relative time expr
    return parse_relative_time_expr(date_expr)
  raise ValueError("Only Relative Time Expressions can be parsed right now")


def get_commits(repo: Repo, date_expr: str = None):
  start_time_interval = parse_date_expr(date_expr)
  for commit in repo.iter_commits():
    if datetime.fromtimestamp(commit.committed_date) >= start_time_interval:
      yield commit
    else:
      break